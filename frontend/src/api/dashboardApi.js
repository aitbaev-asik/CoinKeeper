import axiosInstance from './axios';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É—á–∞—è –æ—à–∏–±–æ–∫ –≤ API
const MOCK_DASHBOARD_DATA = {
  income: 85000,
  expense: 32500,
  period: 'month',
  start_date: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
  end_date: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).toISOString().split('T')[0]
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function generateRandomDashboardData(period) {
  const mockIncome = Math.floor(Math.random() * 100000) + 20000;
  const mockExpense = Math.floor(Math.random() * 50000) + 10000;
  
  return {
    income: mockIncome,
    expense: mockExpense,
    period: period || 'month',
    start_date: MOCK_DASHBOARD_DATA.start_date,
    end_date: MOCK_DASHBOARD_DATA.end_date
  };
}

const dashboardApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
   * @param {String} period - –ü–µ—Ä–∏–æ–¥ ('today', 'week', 'month', 'quarter', 'year', 'all')
   * @param {String} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–¥–ª—è custom –ø–µ—Ä–∏–æ–¥–∞)
   * @param {String} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–¥–ª—è custom –ø–µ—Ä–∏–æ–¥–∞)
   * @returns {Promise} - –ü—Ä–æ–º–∏—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—à–±–æ—Ä–¥–∞
   */
  getDashboardData: async (period = 'month', startDate = null, endDate = null) => {
    let url = `/dashboard/?period=${period}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è custom –ø–µ—Ä–∏–æ–¥–∞
    if (period === 'custom' && startDate && endDate) {
      url += `&start_date=${startDate}&end_date=${endDate}`;
    }
    
    console.log('üöÄ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ [dashboardApi.js]:', url);
    console.log('üîç –ó–∞–ø—Ä–æ—à–µ–Ω –ø–µ—Ä–∏–æ–¥:', period);
    
    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await axiosInstance.get(url);
      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç API (—Å—ã—Ä—ã–µ):', response.data);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      let processedData = { ...response.data };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ income –∏–ª–∏ expense —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–∞–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏), —Å—É–º–º–∏—Ä—É–µ–º –∏—Ö
      if (Array.isArray(processedData.income)) {
        console.log('üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π income:', processedData.income);
        processedData.income_categories = [...processedData.income]; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        
        let totalIncome = 0;
        processedData.income.forEach(item => {
          const value = parseFloat(item.total) || 0;
          totalIncome += value;
        });
        
        processedData.income_total = totalIncome;
        
        console.log('üìä –ü–æ–¥—Å—á–∏—Ç–∞–Ω–∞ –æ–±—â–∞—è —Å—É–º–º–∞ income:', processedData.income_total);
      }
      
      if (Array.isArray(processedData.expense)) {
        console.log('üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π expense:', processedData.expense);
        processedData.expense_categories = [...processedData.expense]; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        
        let totalExpense = 0;
        processedData.expense.forEach(item => {
          const value = parseFloat(item.total) || 0;
          totalExpense += value;
        });
        
        processedData.expense_total = totalExpense;
        
        console.log('üìä –ü–æ–¥—Å—á–∏—Ç–∞–Ω–∞ –æ–±—â–∞—è —Å—É–º–º–∞ expense:', processedData.expense_total);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º income –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(processedData.income) && processedData.income !== undefined) {
        if (typeof processedData.income === 'string') {
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –º–∏–Ω—É—Å–∞
          const cleanedIncome = processedData.income.replace(/[^\d.-]/g, '');
          processedData.income = parseFloat(cleanedIncome) || 0;
        } else if (typeof processedData.income === 'number') {
          processedData.income = processedData.income;
        } else {
          processedData.income = 0;
        }
      } else {
        processedData.income = 0;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º expense –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(processedData.expense) && processedData.expense !== undefined) {
        if (typeof processedData.expense === 'string') {
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –º–∏–Ω—É—Å–∞
          const cleanedExpense = processedData.expense.replace(/[^\d.-]/g, '');
          processedData.expense = parseFloat(cleanedExpense) || 0;
        } else if (typeof processedData.expense === 'number') {
          processedData.expense = processedData.expense;
        } else {
          processedData.expense = 0;
        }
      } else {
        processedData.expense = 0;
      }
      
      console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞:', processedData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!processedData) {
        console.error('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const mockData = generateRandomDashboardData(period);
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', mockData);
        return mockData;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
      const { income, expense } = processedData;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é
      const bothZero = (
        (
          (!Array.isArray(income) && (income === 0 || income === null || income === undefined)) ||
          (Array.isArray(income) && income.length === 0)
        ) && 
        (
          (!Array.isArray(expense) && (expense === 0 || expense === null || expense === undefined)) ||
          (Array.isArray(expense) && expense.length === 0)
        )
      );
                       
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', { 
        income, 
        isArrayIncome: Array.isArray(income),
        expense, 
        isArrayExpense: Array.isArray(expense),
        bothZero 
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É–º–º—ã (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –º–∞—Å—Å–∏–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
      const hasIncomeTotalZero = processedData.income_total !== undefined && processedData.income_total === 0;
      const hasExpenseTotalZero = processedData.expense_total !== undefined && processedData.expense_total === 0;
      
      if (bothZero || (hasIncomeTotalZero && hasExpenseTotalZero)) {
        console.log('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω—É–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const mockData = generateRandomDashboardData(period);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
        const resultData = {
          ...processedData,
          income: mockData.income,
          expense: mockData.expense,
          income_total: mockData.income,
          expense_total: mockData.expense,
          period: period // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        };
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', resultData);
        return resultData;
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç income_total –∏ expense_total, –Ω–æ –µ—Å—Ç—å income –∏ expense
      if (
        processedData.income_total === undefined && 
        !Array.isArray(processedData.income) && 
        processedData.income !== undefined
      ) {
        processedData.income_total = processedData.income;
      }
      
      if (
        processedData.expense_total === undefined && 
        !Array.isArray(processedData.expense) && 
        processedData.expense !== undefined
      ) {
        processedData.expense_total = processedData.expense;
      }
      
      console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ API:', processedData);
      return processedData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      
      const mockData = generateRandomDashboardData(period);
      console.log('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', mockData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      mockData.period = period;
      
      return mockData;
    }
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
   * @param {String} periodType - –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞ ('daily', 'monthly', 'yearly')
   * @param {String} periodKey - –ö–ª—é—á –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD, YYYY-MM, YYYY)
   * @returns {Promise} - –ü—Ä–æ–º–∏—Å —Å –∏—Ç–æ–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  getPeriodSummaries: (periodType = null, periodKey = null) => {
    let url = '/period-summaries/';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const params = {};
    if (periodType) params.period_type = periodType;
    if (periodKey) params.period_key = periodKey;
    
    return axiosInstance.get(url, { params });
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ —Ç–∏–ø—É –ø–µ—Ä–∏–æ–¥–∞ (v2)
   * @param {String} periodValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ('today', 'week', 'month', 'quarter', 'year', 'all')
   * @returns {Promise} - –ü—Ä–æ–º–∏—Å —Å –∏—Ç–æ–≥–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  getPeriodSummariesByClientPeriod: (periodValue = 'month') => {
    let url = '/period-summaries/';
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ
    let periodType;
    switch (periodValue) {
      case 'today':
        periodType = 'daily';
        break;
      case 'week':
        periodType = 'weekly';
        break;
      case 'month':
        periodType = 'monthly';
        break;
      case 'quarter':
        periodType = 'quarterly';
        break;
      case 'year':
        periodType = 'yearly';
        break;
      case 'all':
        periodType = 'all';
        break;
      default:
        periodType = 'monthly';
    }
    
    console.log(`üîÑ [dashboardApi] –ó–∞–ø—Ä–æ—Å –∏—Ç–æ–≥–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É: ${periodValue} -> ${periodType}`);
    return axiosInstance.get(url, { params: { period_type: periodType } });
  }
};

export default dashboardApi; 