import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import { toast } from 'react-toastify';
import { FiCreditCard, FiDollarSign, FiTrendingUp, FiTrendingDown, FiPlus, FiArrowUpRight, FiArrowDownLeft, FiArrowDownRight, FiRefreshCw, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { selectDashboardData, fetchPeriodSummaries } from '../../store/slices/dashboardSlice';
import dashboardApi from '../../api/dashboardApi';
import { openAccountsListModal } from '../../store/slices/uiSlice';
import { fetchAccounts } from '../../store/slices/accountsSlice';
import { Box, CircularProgress, Container, Grid, Typography } from '@mui/material';

// –ú–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—á–µ—Ç–æ–≤
const cardColors = [
  {
    gradientFrom: 'from-blue-700',
    gradientTo: 'to-blue-600',
    style: { background: 'linear-gradient(135deg, #1e40af, #2563eb)' },
    iconBg: 'bg-blue-600/25',
    iconColor: 'text-blue-500'
  },
  {
    gradientFrom: 'from-green-700',
    gradientTo: 'to-green-600',
    style: { background: 'linear-gradient(135deg, #15803d, #22c55e)' },
    iconBg: 'bg-green-600/25',
    iconColor: 'text-green-500'
  },
  {
    gradientFrom: 'from-purple-700',
    gradientTo: 'to-purple-600',
    style: { background: 'linear-gradient(135deg, #7e22ce, #a855f7)' },
    iconBg: 'bg-purple-600/25',
    iconColor: 'text-purple-500'
  },
  {
    gradientFrom: 'from-red-700',
    gradientTo: 'to-red-600',
    style: { background: 'linear-gradient(135deg, #b91c1c, #ef4444)' },
    iconBg: 'bg-red-600/25',
    iconColor: 'text-red-500'
  },
  {
    gradientFrom: 'from-amber-700',
    gradientTo: 'to-amber-600',
    style: { background: 'linear-gradient(135deg, #b45309, #f59e0b)' },
    iconBg: 'bg-amber-600/25',
    iconColor: 'text-amber-500'
  },
  {
    gradientFrom: 'from-pink-700',
    gradientTo: 'to-pink-600',
    style: { background: 'linear-gradient(135deg, #be185d, #ec4899)' },
    iconBg: 'bg-pink-600/25',
    iconColor: 'text-pink-500'
  }
];

const getCardColor = (index) => {
  return cardColors[index % cardColors.length];
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ –∏–º–µ–Ω–∏
const getAccountIcon = (icon) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è:', icon);
  switch(icon) {
    case 'wallet': return <FiDollarSign size={24} />;
    case 'cash': return <FiDollarSign size={24} />;
    case 'credit-card': 
    case 'credit_card':
    case 'briefcase': return <FiCreditCard size={24} />;
    case 'coffee': return <FiCreditCard size={24} />;
    default: return <FiCreditCard size={24} />;
  }
};

const AccountCards = ({ onAddTransaction, onAddAccount }) => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const dashboardData = useSelector(selectDashboardData) || {};
  const { 
    loading: dashboardLoading = false 
  } = dashboardData;

  const accountsState = useSelector(state => state.accounts);
  const accounts = accountsState?.items || [];
  const accountsLoading = accountsState?.loading || false;

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totals, setTotals] = useState({
    balance: 0,
    income: 0,
    expense: 0
  });
  const [currentSlide, setCurrentSlide] = useState(0);
  const carouselRef = useRef(null);
  const touchStartX = useRef(null);
  const touchEndX = useRef(null);
  const [lastRefreshTime, setLastRefreshTime] = useState(new Date());

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const formatCurrency = (value = 0) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'decimal',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –Ω–∞–ø—Ä—è–º—É—é —Å API
  const fetchSummaryDirectly = async () => {
    try {
      console.log(`üöÄ [AccountCards] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Redux –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
      dispatch(fetchPeriodSummaries('month'));

      const response = await dashboardApi.getPeriodSummariesByClientPeriod('month');
      console.log("‚úÖ [AccountCards] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö:", response.data);
      
      if (response.data && Array.isArray(response.data) && response.data.length > 0) {
        const latestSummary = response.data[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
        
        setTotals(prev => ({
          ...prev,
          income: parseFloat(latestSummary.income_amount) || 0,
          expense: parseFloat(latestSummary.expense_amount) || 0
        }));
        
        console.log("üí∞ [AccountCards] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:", {
          income: parseFloat(latestSummary.income_amount) || 0,
          expense: parseFloat(latestSummary.expense_amount) || 0
        });
      } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω—É–ª–∏
        setTotals(prev => ({
          ...prev,
          income: 0,
          expense: 0
        }));
      }
    } catch (error) {
      console.error("‚ùå [AccountCards] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö:", error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö');
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Redux
  const fetchAccountsDirectly = () => {
    console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Redux...");
    dispatch(fetchAccounts());
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
  const calculateTotals = (accountsData) => {
    if (Array.isArray(accountsData) && accountsData.length > 0) {
      const totalBalance = accountsData.reduce((acc, account) => {
        const balance = typeof account.balance === 'number' 
          ? account.balance 
          : typeof account.balance === 'string' && !isNaN(parseFloat(account.balance))
              ? parseFloat(account.balance)
              : 0;
        return acc + balance;
      }, 0);
      
      setTotals(prev => ({
        ...prev,
        balance: totalBalance
      }));
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤
  useEffect(() => {
    if (accounts && accounts.length > 0) {
      calculateTotals(accounts);
      setLoading(false);
    }
  }, [accounts]);

  // –°–ª–µ–¥–∏–º –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Redux
  const reduxDashboardData = useSelector(selectDashboardData);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è Redux state
  useEffect(() => {
    if (reduxDashboardData) {
      setTotals(prev => ({
        ...prev, 
        income: reduxDashboardData.income || 0,
        expense: reduxDashboardData.expense || 0
      }));
      console.log('üîÑ [AccountCards] –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux:', {
        income: reduxDashboardData.income,
        expense: reduxDashboardData.expense
      });
    }
  }, [reduxDashboardData]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ [AccountCards] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Redux
    dispatch(fetchAccounts());
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö/—Ä–∞—Å—Ö–æ–¥–∞—Ö —á–µ—Ä–µ–∑ Redux
    dispatch(fetchPeriodSummaries('month'));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    setLastRefreshTime(new Date());
  }, [dispatch]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleRefresh = () => {
    console.log('üîÑ [AccountCards] –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // const toastId = toast.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', { autoClose: false });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞
    dispatch(fetchAccounts());
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
    dispatch(fetchPeriodSummaries('month'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    setLastRefreshTime(new Date());
    
    // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setTimeout(() => {
      toast.update(toastId, { 
        render: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 
        type: toast.TYPE.SUCCESS, 
        autoClose: 3000 
      });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleAddNewTransaction = (type, accountId) => {
    if (typeof onAddTransaction === 'function') {
      onAddTransaction(type, accountId);
    }
  };

  const handleAddNewAccount = () => {
    if (typeof onAddAccount === 'function') {
      onAddAccount();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
  const getCardColor = (account, index) => {
    // –ï—Å–ª–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π —Ü–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (account && account.color && account.color.startsWith('#')) {
      const color = account.color;
      const lighterColor = lightenColor(color, 20);
      return {
        gradientFrom: '',
        gradientTo: '',
        style: { background: `linear-gradient(135deg, ${color}, ${lighterColor})` },
        iconBg: 'bg-opacity-25 bg-white',
        iconColor: 'text-white'
      };
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
    return cardColors[index % cardColors.length];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (HEX)
  const lightenColor = (color, amount) => {
    if (!color || typeof color !== 'string' || !color.startsWith('#')) {
      return '#3b82f6'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HEX –≤ RGB
      let r = parseInt(color.slice(1, 3), 16);
      let g = parseInt(color.slice(3, 5), 16);
      let b = parseInt(color.slice(5, 7), 16);

      // –û—Å–≤–µ—Ç–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      r = Math.min(255, r + amount);
      g = Math.min(255, g + amount);
      b = Math.min(255, b + amount);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ HEX
      return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞:', e);
      return '#3b82f6'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
  const handleViewAllAccounts = () => {
    dispatch(openAccountsListModal());
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏
  const getIconColorClass = (account) => {
    if (account.color && account.color.startsWith('#')) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç
      return 'text-white';
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
    const index = accounts.indexOf(account);
    return cardColors[index % cardColors.length].iconColor;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
  const nextSlide = () => {
    if (accounts.length > 0) {
      setCurrentSlide((prev) => (prev === accounts.length ? 0 : prev + 1));
    }
  };

  const prevSlide = () => {
    if (accounts.length > 0) {
      setCurrentSlide((prev) => (prev === 0 ? accounts.length : prev - 1));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
  const handleAddTransfer = (fromAccountId) => {
    onAddTransaction('transfer', fromAccountId);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–∞ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
  const handleTouchStart = (e) => {
    touchStartX.current = e.touches[0].clientX;
  };
  
  const handleTouchMove = (e) => {
    touchEndX.current = e.touches[0].clientX;
  };
  
  const handleTouchEnd = () => {
    if (!touchStartX.current || !touchEndX.current) return;
    
    const diff = touchStartX.current - touchEndX.current;
    const threshold = 50; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞
    
    if (diff > threshold) {
      // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
      nextSlide();
    } else if (diff < -threshold) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
      prevSlide();
    }
    
    touchStartX.current = null;
    touchEndX.current = null;
  };

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  if (loading) {
    return (
      <div className="bg-dark-800 rounded-xl p-5 shadow-md">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold">–í–∞—à–∏ —Å—á–µ—Ç–∞</h2>
        </div>
        <div className="text-center py-8">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary-500 border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite] mb-4"></div>
          <h3 className="text-lg font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–æ–≤...</h3>
          <p className="text-sm text-gray-400 mt-2">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö —Å—á–µ—Ç–∞—Ö</p>
        </div>
      </div>
    );
  }

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—É—Å–µ–ª–∏
  const accountsWithNewAccount = [
    ...accounts,
    { id: 'new-account', isAddButton: true }
  ];
  
  const totalSlides = accountsWithNewAccount.length;
  const hasMultipleSlides = totalSlides > 3;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
  const getVisibleItems = () => {
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if (totalSlides <= 3) {
      return accountsWithNewAccount;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
    const items = [];
    for (let i = 0; i < 3; i++) {
      const index = (currentSlide + i) % totalSlides;
      items.push(accountsWithNewAccount[index]);
    }
    return items;
  };

  const visibleItems = getVisibleItems();

  return (
    <div className="bg-dark-800 rounded-xl p-5 shadow-md">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">–í–∞—à–∏ —Å—á–µ—Ç–∞</h2>
        <div className="flex space-x-2">
          <button 
            className="btn btn-sm btn-outline" 
            onClick={handleViewAllAccounts}
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
          </button>
          <button 
            className="btn btn-primary btn-sm" 
            onClick={handleAddNewAccount}
          >
            <FiPlus className="mr-1" />
            –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
          </button>
        </div>
      </div>

      {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        {/* –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å */}
        <div className="bg-gradient-to-r from-teal-800 to-teal-700 rounded-xl p-5 shadow-lg relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-5 transform translate-x-10 -translate-y-10 rounded-full"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-5 transform -translate-x-10 translate-y-10 rounded-full"></div>
          
          <p className="text-gray-200 font-medium mb-1">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</p>
          <h2 className="text-3xl font-bold text-white mb-4">{formatCurrency(totals.balance)} ‚Ç∏</h2>
          
          <button 
            onClick={() => onAddTransaction('any')} 
            className="btn btn-sm btn-primary bg-teal-600 hover:bg-teal-500 border-none"
          >
            <FiPlus className="w-4 h-4 mr-1" /> –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          </button>
        </div>
        
        {/* –î–æ—Ö–æ–¥—ã */}
        <div className="bg-gradient-to-r from-green-800 to-green-700 rounded-xl p-5 shadow-lg relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-5 transform translate-x-10 -translate-y-10 rounded-full"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-5 transform -translate-x-10 translate-y-10 rounded-full"></div>
          
          <div className="flex justify-between items-start mb-1">
            <p className="text-gray-200 font-medium">–î–æ—Ö–æ–¥—ã</p>
            <FiTrendingUp className="text-green-300" />
          </div>
          {dashboardLoading ? (
            <div className="text-white text-2xl font-bold mb-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : (
            <h2 className="text-3xl font-bold text-white mb-4">
              {formatCurrency(totals.income)} ‚Ç∏
            </h2>
          )}
          
          <button 
            onClick={() => onAddTransaction('income')} 
            className="btn btn-sm bg-green-600 hover:bg-green-500 border-none"
          >
            <FiArrowDownLeft className="w-4 h-4 mr-1" /> –î–æ—Ö–æ–¥
          </button>
        </div>

        {/* –†–∞—Å—Ö–æ–¥—ã */}
        <div className="bg-gradient-to-r from-red-800 to-red-700 rounded-xl p-5 shadow-lg relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-5 transform translate-x-10 -translate-y-10 rounded-full"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-5 transform -translate-x-10 translate-y-10 rounded-full"></div>
          
          <div className="flex justify-between items-start mb-1">
            <p className="text-gray-200 font-medium">–†–∞—Å—Ö–æ–¥—ã</p>
            <FiTrendingDown className="text-red-300" />
          </div>
          {dashboardLoading ? (
            <div className="text-white text-2xl font-bold mb-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : (
            <h2 className="text-3xl font-bold text-white mb-4">
              {formatCurrency(totals.expense)} ‚Ç∏
            </h2>
          )}
          
          <button 
            onClick={() => onAddTransaction('expense')} 
            className="btn btn-sm bg-red-600 hover:bg-red-500 border-none"
          >
            <FiArrowUpRight className="w-4 h-4 mr-1" /> –†–∞—Å—Ö–æ–¥
          </button>
        </div>
      </div>

      <div className="flex items-center justify-between mb-3">
        <h3 className="text-lg font-semibold">–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤</h3>
        {hasMultipleSlides && (
          <div className="flex gap-2">
            <span className="text-sm text-gray-400">
              {currentSlide + 1}/{totalSlides}
            </span>
            <div className="flex gap-1">
              <button 
                onClick={prevSlide}
                className="p-1 rounded-full bg-dark-600 hover:bg-dark-500 transition-colors"
                title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—á–µ—Ç"
              >
                <FiChevronLeft className="w-5 h-5" />
              </button>
              <button 
                onClick={nextSlide}
                className="p-1 rounded-full bg-dark-600 hover:bg-dark-500 transition-colors"
                title="–°–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç"
              >
                <FiChevronRight className="w-5 h-5" />
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ */}
      {accounts.length > 0 ? (
        <div className="relative">
          <div 
            ref={carouselRef}
            className="flex transition-transform duration-300 ease-in-out gap-4"
            style={{ transform: `translateX(0px)` }}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
          >
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 w-full">
              {visibleItems.map((item, index) => {
                // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
                if (item.isAddButton) {
                  return (
                    <div 
                      key="new-account"
                      onClick={onAddAccount}
                      className="bg-dark-700 hover:bg-dark-600 rounded-xl p-5 shadow-lg border-2 border-dashed border-dark-500 cursor-pointer transition-colors flex flex-col items-center justify-center text-center"
                    > 
                      <h3 className="text-lg font-medium mb-2">–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç</h3>
                      <p className="text-gray-400">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</p>
                    </div>
                  );
                }
                
                // –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—á–µ—Ç–∞
                const colorScheme = getCardColor(item, index);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
                let cardStyle = {};
                let cardClass = 'rounded-xl p-5 shadow-lg relative overflow-hidden';
                
                // –ï—Å–ª–∏ —É —Å—á–µ—Ç–∞ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (item.color && item.color.startsWith('#')) {
                  cardStyle = { background: item.color };
                } else if (colorScheme.style) {
                  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
                  cardStyle = colorScheme.style;
                } else {
                  // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∏–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
                  cardClass += ` bg-gradient-to-r ${colorScheme.gradientFrom} ${colorScheme.gradientTo}`;
                }
                
                return (
                  <div 
                    key={item.id} 
                    style={cardStyle}
                    className={cardClass}
                  >
                    {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
                    <div className="absolute top-0 right-0 w-32 h-32 bg-white opacity-5 transform translate-x-10 -translate-y-10 rounded-full"></div>
                    <div className="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-5 transform -translate-x-10 translate-y-10 rounded-full"></div>
                    
                    <div className="relative z-10">
                      <div className="flex justify-between items-start mb-2">
                        <div className="bg-white/20 p-2 rounded-full">
                          {getAccountIcon(item.icon)}
                        </div>
                        
                        <div>
                          <h3 className="text-lg font-semibold text-right text-white">{item.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</h3>
                        </div>
                      </div>
                      
                      <div className="mt-4 mb-6">
                        <p className="text-white/70 text-sm mb-1">–ë–∞–ª–∞–Ω—Å</p>
                        <h4 className="text-2xl font-bold text-white">
                          {parseFloat(item.balance || 0).toLocaleString('ru-RU')} ‚Ç∏
                        </h4>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-2 mt-6">
                        <button 
                          onClick={() => onAddTransaction('income', item.id)} 
                          className="btn btn-sm bg-white/10 hover:bg-white/20 border-none text-white flex items-center justify-center"
                        >
                          <FiArrowDownLeft className="mr-1" />
                          <span>–î–æ—Ö–æ–¥</span>
                        </button>
                        
                        <button 
                          onClick={() => navigate(`/transactions?account=${item.id}`)} 
                          className="btn btn-sm bg-white/15 hover:bg-white/25 border-none text-white flex items-center justify-center"
                        >
                          <FiDollarSign className="mr-1" />
                          <span>–ò—Å—Ç–æ—Ä–∏—è</span>
                        </button>
                        
                        <button 
                          onClick={() => onAddTransaction('expense', item.id)} 
                          className="btn btn-sm bg-white/10 hover:bg-white/20 border-none text-white flex items-center justify-center"
                        >
                          <FiArrowUpRight className="mr-1" />
                          <span>–†–∞—Å—Ö–æ–¥</span>
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          
          {hasMultipleSlides && (
            <>
              <button 
                onClick={prevSlide}
                className="absolute left-0 top-1/2 transform -translate-y-1/2 -ml-4 p-2 rounded-full bg-dark-700/80 hover:bg-dark-600 transition-colors shadow-lg z-20"
                title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π"
              >
                <FiChevronLeft className="w-6 h-6 text-white" />
              </button>
              <button 
                onClick={nextSlide}
                className="absolute right-0 top-1/2 transform -translate-y-1/2 -mr-4 p-2 rounded-full bg-dark-700/80 hover:bg-dark-600 transition-colors shadow-lg z-20"
                title="–°–ª–µ–¥—É—é—â–∏–π"
              >
                <FiChevronRight className="w-6 h-6 text-white" />
              </button>
            </>
          )}
        </div>
      ) : (
        <div className="text-center py-10">
          <FiDollarSign className="mx-auto w-12 h-12 text-gray-500 mb-4" />
          <h3 className="text-lg font-medium mb-2">–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤</h3>
          <p className="text-sm text-gray-400 mb-4">–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</p>
          <button 
            onClick={onAddAccount} 
            className="btn btn-primary mx-auto"
          >
            <FiPlus className="w-4 h-4 mr-2" /> –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
          </button>
        </div>
      )}
      
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
      <div className="fixed bottom-6 right-6 z-50">
        <button 
          onClick={() => onAddTransaction('any')}
          className="btn btn-circle btn-lg bg-green-600 hover:bg-green-500 border-none shadow-lg text-white"
        >
          <FiPlus className="w-6 h-6" />
        </button>
      </div>
    </div>
  );
};

export default AccountCards; 